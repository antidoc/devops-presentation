name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install flake8 black mypy
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          cd backend
          flake8 app tests
      - name: Check formatting with black
        run: |
          cd backend
          black --check app tests
      - name: Type check with mypy
        run: |
          cd backend
          mypy app

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run tests
        run: |
          cd backend
          pytest --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  backend-security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run bandit
        run: |
          cd backend
          bandit -r app -f json -o bandit-results.json
      - name: Run safety check
        run: |
          cd backend
          safety check -r requirements.txt

  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for frontend directory:"
          find . -type d -name "frontend" || echo "No frontend directory found"
          echo "Looking for package.json:"
          find . -name "package.json" || echo "No package.json found"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint
        run: |
          cd frontend
          npm run lint

#  frontend-test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#          cache: 'npm'
#          cache-dependency-path: 'frontend/package-lock.json'
#
#      - name: Install dependencies
#        run: |
#          cd frontend
#          npm ci
#
#      - name: Run tests
#        run: |
#          cd frontend
#          npm test -- --watchAll=false